@startuml calculator
set namespaceSeparator none
class "AtmosphereParams" as atlast_sc.atmosphere_params.AtmosphereParams {
  T_atm : Quantity
  tau_atm : float
  AtmosphereParams(obs_freq : Quantity, weather : float,
  elevation : Quantity)
}
class "CalculationInput" as atlast_sc.models.CalculationInput {
  T_cmb : Quantity
  instrument_setup : InstrumentSetup
  user_input : UserInput
}
class "Calculator" as atlast_sc.calculator.Calculator {
  bandwidth : Quantity
  dish_radius : Quantity
  elevation : Quantity
  eta_a : float
  eta_block : float
  eta_eff : float
  eta_ill : float
  eta_pol : float
  eta_s : float
  eta_spill : float
  g : float
  n_pol : float
  obs_freq : Quantity
  sefd : Quantity
  sensitivity : Quantity
  surface_rms : Quantity
  t_int : Quantity
  T_amb : Quantity
  T_atm : Quantity
  T_cmb : Quantity
  T_rx : Quantity
  T_sys  : Quantity
  tau_atm : float
  weather : float
  user_input : UserInput
  calculation_inputs : CalculationInput
  derived_parameters : DerivedParams
  instrument_setup : InstrumentSetup
  Calculator(user_input: dict, instrument_setup: dict)
  calculate_sensitivity(t_int, update_calculator): Quantity
  calculate_t_integration(sensitivity, update_calculator) : Quantity
  reset()
}
class "Config" as atlast_sc.config.Config {
  calculation_inputs : CalculationInput
  instrument_setup : InstrumentSetup
  user_input : UserInput
  Config(user_input: dict, instrument_setup: dict)
  reset()
}
class "DerivedParams" as atlast_sc.models.DerivedParams {
  T_atm : Quantity
  T_rx : Quantity
  T_sys : Quantity
  eta_a : float
  eta_s : float
  sefd : Quantity
  tau_atm : float
}
class "Efficiencies" as atlast_sc.efficiencies.Efficiencies {
  eta_a : float
  eta_s : float
  Efficiencies(obs_freq : Quantity, surface_rms : Quantity,
  eta_ill : float, eta_spill : float, eta_block : float, eta_pol : float)
}
class "InstrumentSetup" as atlast_sc.models.InstrumentSetup {
  T_amb : Quantity
  dish_radius : Quantity
  eta_block : float
  eta_eff : float
  eta_ill : float
  eta_pol : float
  eta_spill : float
  g : float
  surface_rms : Quantity
}
class "Temperatures" as atlast_sc.temperatures.Temperatures {
  T_rx : Quantity
  T_sys : Quantity
  Temperatures(obs_freq : Quantity, T_cmb : Quantity, T_amb : Quantity,
  g : float, eta_eff : float, atmosphere_params : AtmosphereParams)
}
class "UserInput" as atlast_sc.models.UserInput {
  bandwidth : Quantity
  elevation : Quantity
  n_pol : float
  obs_freq : Quantity
  sensitivity : Quantity
  t_int : Quantity
  weather : float
}
class "Decorators" as atlast_sc.utils.Decorators {
  validate_and_update_params(func)
  validate_update(func)
}
atlast_sc.efficiencies.Efficiencies --o atlast_sc.calculator.Calculator
atlast_sc.temperatures.Temperatures --o atlast_sc.calculator.Calculator
atlast_sc.atmosphere_params.AtmosphereParams --o atlast_sc.calculator.Calculator
atlast_sc.utils.Decorators --> atlast_sc.calculator.Calculator
atlast_sc.models.CalculationInput --* atlast_sc.config.Config
atlast_sc.calculator.Calculator *-- atlast_sc.models.DerivedParams
atlast_sc.models.InstrumentSetup --* atlast_sc.models.CalculationInput
atlast_sc.models.UserInput --* atlast_sc.models.CalculationInput
atlast_sc.calculator.Calculator *-- atlast_sc.config.Config
@enduml
