@startuml classes_atlast_sc.calculator
set namespaceSeparator none
class "AtmosphereParams" as atlast_sc.atmosphere_params.AtmosphereParams {
  T_atm
  tau_atm
}
class "<color:red>CalculatedValueInvalidWarning</color>" as atlast_sc.exceptions.CalculatedValueInvalidWarning {
  message
}
class "CalculationInput" as atlast_sc.models.CalculationInput {
  T_cmb
  instrument_setup
  user_input
  validate_fields(field_values)
  validate_update(value_to_update, new_value)
}
class "Calculator" as atlast_sc.calculator.Calculator {
  T_amb
  T_atm
  T_cmb
  T_rx
  T_sys
  bandwidth
  calculation_inputs
  derived_parameters
  dish_radius
  elevation
  eta_a
  eta_block
  eta_eff
  eta_ill
  eta_pol
  eta_s
  eta_spill
  g
  instrument_setup
  n_pol
  obs_freq
  sefd
  sensitivity
  sensitivity
  surface_rms
  t_int
  t_int
  tau_atm
  user_input
  weather
  calculate_sensitivity(t_int, update_calculator)
  calculate_t_integration(sensitivity, update_calculator)
  reset()
}
class "Config" as atlast_sc.models.ValueWithUnits.Config {
  arbitrary_types_allowed : bool
}
class "Config" as atlast_sc.models.DerivedParams.Config {
  arbitrary_types_allowed : bool
}
class "Config" as atlast_sc.config.Config {
  calculation_inputs
  instrument_setup
  user_input
  reset()
}
class "DataHelper" as atlast_sc.utils.DataHelper {
  convert(quantity, from_unit, to_unit)
  data_conversion_factors(default_unit, allowed_units)
}
class "DataType" as atlast_sc.data.DataType {
  allowed_values : Optional[list]
  data_conversion : Optional[dict]
  default_unit : Optional[str]
  default_value : Optional[float]
  lower_value : Optional[float]
  lower_value_is_floor : bool
  units : Optional[list[str]]
  upper_value : Optional[float]
  upper_value_is_ceil : bool
}
class "Decorators" as atlast_sc.utils.Decorators {
  validate_and_update_params(func)
  validate_update(func)
}
class "DerivedParams" as atlast_sc.models.DerivedParams {
  T_atm : Quantity
  T_rx : Quantity
  T_sys : Quantity
  eta_a : float
  eta_s : float
  sefd : Quantity
  tau_atm : float
}
class "Efficiencies" as atlast_sc.efficiencies.Efficiencies {
  eta_a
  eta_s
}
class "FileHelper" as atlast_sc.utils.FileHelper {
  SUPPORTED_FILE_EXTENSIONS : list
  UNSUPPORTED_FILE_TYPE_ERROR_MSG : str
  read_from_file(path, file_name)
  write_to_file(calculator, path, file_name, file_type)
}
class "InstrumentSetup" as atlast_sc.models.InstrumentSetup {
  T_amb
  dish_radius
  eta_block
  eta_eff
  eta_ill
  eta_pol
  eta_spill
  g
  surface_rms
}
class "Temperatures" as atlast_sc.temperatures.Temperatures {
  T_rx
  T_sys
}
class "<color:red>UnitException</color>" as atlast_sc.exceptions.UnitException {
  expected_units
  message
  parameter
}
class "UserInput" as atlast_sc.models.UserInput {
  bandwidth
  elevation
  n_pol
  obs_freq
  sensitivity
  t_int
  weather
  validate_t_int_or_sens_initialised(field_values)
}
class "Validator" as atlast_sc.models.Validator {
  validate_allowed_values(value, param, data_type)
  validate_field(key, val)
  validate_in_range(value, param, data_type)
  validate_units(unit, param, data_type)
}
class "<color:red>ValueNotAllowedException</color>" as atlast_sc.exceptions.ValueNotAllowedException {
  allowed_values
  message
  parameter
  units : NoneType
}
class "<color:red>ValueOutOfRangeException</color>" as atlast_sc.exceptions.ValueOutOfRangeException {
  lower_value
  message
  parameter
  units : NoneType
  upper_value
}
class "<color:red>ValueTooHighException</color>" as atlast_sc.exceptions.ValueTooHighException {
  message
}
class "<color:red>ValueTooLowException</color>" as atlast_sc.exceptions.ValueTooLowException {
  message
}
class "ValueWithUnits" as atlast_sc.models.ValueWithUnits {
  unit
  unit : str
  value
  value : float
  validate_fields(field_values)
}
class "ValueWithoutUnits" as atlast_sc.models.ValueWithoutUnits {
  value
  value : float
}
atlast_sc.exceptions.ValueTooHighException --|> atlast_sc.exceptions.ValueOutOfRangeException
atlast_sc.exceptions.ValueTooLowException --|> atlast_sc.exceptions.ValueOutOfRangeException
atlast_sc.config.Config --* atlast_sc.calculator.Calculator : _config
atlast_sc.models.CalculationInput --* atlast_sc.config.Config : _calculation_inputs
atlast_sc.models.DerivedParams --* atlast_sc.calculator.Calculator : _derived_params
atlast_sc.models.DerivedParams --* atlast_sc.calculator.Calculator : _derived_params
atlast_sc.models.InstrumentSetup --* atlast_sc.config.Config : _instrument_setup
atlast_sc.models.InstrumentSetup --* atlast_sc.models.CalculationInput : instrument_setup
atlast_sc.models.UserInput --* atlast_sc.config.Config : _user_input
atlast_sc.models.UserInput --* atlast_sc.models.CalculationInput : user_input
atlast_sc.models.ValueWithUnits --* atlast_sc.models.CalculationInput : T_cmb
atlast_sc.models.ValueWithUnits --* atlast_sc.models.InstrumentSetup : surface_rms
atlast_sc.models.ValueWithUnits --* atlast_sc.models.InstrumentSetup : dish_radius
atlast_sc.models.ValueWithUnits --* atlast_sc.models.InstrumentSetup : T_amb
atlast_sc.models.ValueWithUnits --* atlast_sc.models.UserInput : t_int
atlast_sc.models.ValueWithUnits --* atlast_sc.models.UserInput : sensitivity
atlast_sc.models.ValueWithUnits --* atlast_sc.models.UserInput : bandwidth
atlast_sc.models.ValueWithUnits --* atlast_sc.models.UserInput : obs_freq
atlast_sc.models.ValueWithUnits --* atlast_sc.models.UserInput : elevation
atlast_sc.models.ValueWithoutUnits --* atlast_sc.models.InstrumentSetup : g
atlast_sc.models.ValueWithoutUnits --* atlast_sc.models.InstrumentSetup : eta_eff
atlast_sc.models.ValueWithoutUnits --* atlast_sc.models.InstrumentSetup : eta_ill
atlast_sc.models.ValueWithoutUnits --* atlast_sc.models.InstrumentSetup : eta_spill
atlast_sc.models.ValueWithoutUnits --* atlast_sc.models.InstrumentSetup : eta_block
atlast_sc.models.ValueWithoutUnits --* atlast_sc.models.InstrumentSetup : eta_pol
atlast_sc.models.ValueWithoutUnits --* atlast_sc.models.UserInput : n_pol
atlast_sc.models.ValueWithoutUnits --* atlast_sc.models.UserInput : weather
@enduml
